{"version":3,"sources":["webpack:///./js/task1.js","webpack:///./js/task2.js","webpack:///./js/task3.js"],"names":["delay","ms","Promise","resolve","reject","setTimeout","logger","time","console","log","then","users","name","active","toggleUserState","allUsers","userName","map","user","updatedUsers","table","makeTransaction","transaction","min","max","Math","floor","random","id","logSuccess","item","logError","warn","amount","data","catch"],"mappings":"2JAKMA,EAAQ,SAAAC,GAOR,OALc,IAAIC,SAAQ,SAACC,EAASC,GAClCC,YAAW,WACTF,EAAQF,KACPA,OAKHK,EAAS,SAAAC,GAAI,OAAIC,QAAQC,IAAR,kBAA8BF,EAA9B,OAGvBP,EAAM,KAAMU,KAAKJ,GACjBN,EAAM,KAAMU,KAAKJ,GACjBN,EAAM,MAAMU,KAAKJ,G,kCChBbK,EAAQ,CACV,CAAEC,KAAM,QAASC,QAAQ,GACzB,CAAED,KAAM,OAAQC,QAAQ,GACxB,CAAED,KAAM,OAAQC,QAAQ,GACxB,CAAED,KAAM,MAAOC,QAAQ,IAGnBC,EAAkB,SAACC,EAAUC,GAQrC,OAPsB,IAAId,SAAQ,SAACC,EAASC,GAIxCD,EAH2BY,EAASE,KAAI,SAAAC,GAAI,OAC1CA,EAAKN,OAASI,EAAd,iBAA8BE,EAA9B,CAAoCL,QAASK,EAAKL,SAAWK,UAQ3DZ,EAAS,SAAAa,GAAY,OAAIX,QAAQY,MAAMD,IAW7CL,EAAgBH,EAAO,SAASD,KAAKJ,GACrCQ,EAAgBH,EAAO,OAAOD,KAAKJ,GC9BjC,IAIQe,EAAkB,SAACC,GACvB,IAL+BC,EAAKC,EAK9BxB,GALyBuB,EAKS,IALJC,EAKS,IAJtCC,KAAKC,MAAMD,KAAKE,UAAYH,EAAMD,EAAM,GAAKA,IAKpD,OAAO,IAAIrB,SAAQ,SAACC,EAASC,GACzBC,YAAW,WAGX,GAFmBoB,KAAKE,SAAW,GAEnB,CACZ,IAAMC,EAAKN,EAAYM,GACvBzB,EAAQ,CAACyB,KAAI5B,eAEbI,EAAOkB,EAAYM,MAEpB5B,OAIH6B,EAAa,SAACC,GAClBtB,QAAQC,IAAR,eAA2BqB,EAAKF,GAAhC,iBAAmDE,EAAK9B,MAAxD,QAGI+B,EAAW,SAAAH,GACfpB,QAAQwB,KAAR,gCAA6CJ,EAA7C,8BAaFP,EAAgB,CAAEO,GAAI,GAAIK,OAAQ,MAC/BvB,MAAK,SAAAwB,GAAI,OAAI1B,QAAQC,IAAIyB,MACzBC,MAAMJ,GAETV,EAAgB,CAAEO,GAAI,GAAIK,OAAQ,MAC/BvB,KAAKmB,GACLM,MAAMJ,GAETV,EAAgB,CAAEO,GAAI,GAAIK,OAAQ,KAC/BvB,KAAKmB,GACLM,MAAMJ,GAETV,EAAgB,CAAEO,GAAI,GAAIK,OAAQ,MAC/BvB,KAAKmB,GACLM,MAAMJ,K","file":"main.730e7eda187c6698421d.js","sourcesContent":["/* Напиши функцию delay(ms), которая возвращает промис, \r\nпереходящий в состояние \"resolved\" через ms миллисекунд. \r\nЗначением исполнившегося промиса должно быть то кол-во \r\nмиллисекунд которое передали во время вызова функции delay. */\r\n\r\nconst delay = ms => {\r\n    // Твой код\r\n    const promise = new Promise((resolve, reject) => {\r\n        setTimeout(() => {\r\n          resolve(ms);\r\n        }, ms);\r\n      });\r\n      return promise;\r\n  };\r\n  \r\n  const logger = time => console.log(`Resolved after ${time}ms`);\r\n  \r\n  // Вызовы функции для проверки\r\n  delay(2000).then(logger); // Resolved after 2000ms\r\n  delay(1000).then(logger); // Resolved after 1000ms\r\n  delay(1500).then(logger); // Resolved after 1500ms","/* Перепиши функцию toggleUserState() так, чтобы она не \r\nиспользовала callback-функцию callback, а принимала всего \r\nдва параметра allUsers и userName и возвращала промис. */\r\n\r\nconst users = [\r\n    { name: 'Mango', active: true },\r\n    { name: 'Poly', active: false },\r\n    { name: 'Ajax', active: true },\r\n    { name: 'Lux', active: false },\r\n  ];\r\n  \r\n  const toggleUserState = (allUsers, userName) => {\r\n      const promise = new Promise((resolve, reject)=>{\r\n          const updatedUsers = allUsers.map(user =>\r\n      user.name === userName ? { ...user, active: !user.active } : user,\r\n    );\r\n    resolve(updatedUsers);\r\n});\r\n\r\nreturn promise;\r\n  };\r\n  \r\n  const logger = updatedUsers => console.table(updatedUsers);\r\n  \r\n  /*\r\n   * Сейчас работает так\r\n   */\r\n  //toggleUserState(users, 'Mango', logger);\r\n  //toggleUserState(users, 'Lux', logger);\r\n  \r\n  /*\r\n   * Должно работать так\r\n   */\r\n  toggleUserState(users, 'Mango').then(logger);\r\n  toggleUserState(users, 'Lux').then(logger);","/* Перепиши функцию makeTransaction() так, чтобы она не \r\nиспользовала callback-функции onSuccess и onError, а принимала \r\nвсего один параметр transaction и возвращала промис. */\r\n\r\n    const randomIntegerFromInterval = (min, max) => {\r\n        return Math.floor(Math.random() * (max - min + 1) + min);\r\n      };\r\n      \r\n      const makeTransaction = (transaction) => {\r\n        const delay = randomIntegerFromInterval(200, 500);\r\n        return new Promise((resolve, reject)=>{\r\n            setTimeout(() => {\r\n            const canProcess = Math.random() > 0.3;\r\n        \r\n            if (canProcess) {\r\n                const id = transaction.id;\r\n                resolve({id, delay});\r\n            } else {\r\n                reject(transaction.id);\r\n            }\r\n            }, delay);\r\n    });\r\n      };\r\n      \r\n      const logSuccess = (item) => {\r\n        console.log(`Transaction ${item.id} processed in ${item.delay} ms`);\r\n      };\r\n      \r\n      const logError = id => {\r\n        console.warn(`Error processing transaction ${id}. Please try again later.`);\r\n      };\r\n      \r\n      /*\r\n       * Работает так\r\n       */\r\n      /* makeTransaction({ id: 70, amount: 150 }, logSuccess, logError);\r\n      makeTransaction({ id: 71, amount: 230 }, logSuccess, logError);\r\n      makeTransaction({ id: 72, amount: 75 }, logSuccess, logError);\r\n      makeTransaction({ id: 73, amount: 100 }, logSuccess, logError); */\r\n      /*\r\n       * Должно работать так\r\n       */\r\n      makeTransaction({ id: 70, amount: 150 })\r\n        .then(data => console.log(data))\r\n        .catch(logError);\r\n      \r\n      makeTransaction({ id: 71, amount: 230 })\r\n        .then(logSuccess)\r\n        .catch(logError);\r\n      \r\n      makeTransaction({ id: 72, amount: 75 })\r\n        .then(logSuccess)\r\n        .catch(logError);\r\n      \r\n      makeTransaction({ id: 73, amount: 100 })\r\n        .then(logSuccess)\r\n        .catch(logError);"],"sourceRoot":""}